// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces
import XCTest
@testable import ArkanaKeys

final class ArkanaKeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: ArkanaKeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0xe, 0xf6, 0x12, 0x65, 0xa9, 0xf, 0x56, 0x2b, 0xed, 0x2e, 0x2a, 0x40, 0x67, 0xfd, 0x96, 0x92, 0x32, 0xb1, 0xa9, 0xee, 0x55, 0x92, 0x91, 0xca, 0xc, 0x62, 0xb9, 0xb9, 0x4, 0x91, 0x93, 0x42, 0xde, 0x71, 0x56, 0x22, 0x7, 0xb3, 0x60, 0x34, 0xdc, 0xd7, 0x9, 0x7f, 0x7a, 0xd7, 0x41, 0xa0, 0x5a, 0x2f, 0x4b, 0xb1, 0x2b, 0xb0, 0x7b, 0x1a, 0xed, 0xab, 0x2f, 0x6d, 0xff, 0x4b, 0x19, 0xae
        ]
        globalSecrets = ArkanaKeys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x3b, 0xc7, 0x73, 0x53, 0xca, 0x6b, 0x35, 0x1c, 0xdb, 0x1e, 0x13, 0x22, 0x3, 0xc5, 0xf4, 0xa3, 0x3, 0x82, 0xca, 0xde, 0x30, 0xf0, 0xa6, 0xf9, 0x6f, 0x1, 0xdf, 0x8f, 0x35, 0xa7, 0xaa, 0x71, 0xed, 0x17, 0x37, 0x44, 0x63, 0xd1, 0x52, 0x1, 0xec, 0xb1, 0x3f, 0x4b, 0x18, 0xee, 0x24, 0x96, 0x6f, 0x1f, 0x7c, 0x81, 0x4e, 0x87, 0x43, 0x28, 0x88, 0xca, 0x17, 0x9, 0xca, 0x2a, 0x2a, 0x9b, 0x3b, 0xcf, 0x71, 0x7, 0x9b, 0x38, 0x63, 0x1b, 0xd5, 0x18, 0x1d, 0x71, 0x5e, 0xcd, 0xa5, 0xf0, 0, 0x89, 0x9b, 0xdb, 0x61, 0xa2, 0xa4, 0xf3, 0x3f, 0x50, 0xdb, 0xdd, 0x36, 0xa4, 0xa6, 0x71, 0xee, 0x13, 0x37, 0x17, 0x62, 0xd6, 0x51, 0x1, 0xe9, 0xb5, 0x3a, 0x19, 0x1c, 0xb4, 0x22, 0xc2, 0x6b, 0x17, 0x72, 0x82, 0x1a, 0xd6, 0x4c, 0x29, 0xdb, 0x9c, 0x4c, 0xe, 0x9d, 0x7f, 0x2d, 0x96
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "51a6cdc7609bd8b113c0eb73ccf616933fafdb250f64b9e65070e782ea8d5a3559cb27508671903b2825405932bd25530ba5ee155b3ffccb18931f7367ccb448")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x40, 0xbf, 0x2a, 0x4e, 0xdb, 0x7d, 0x3a, 0x72, 0xd4, 0x63, 0x5c, 0x76, 0x3, 0x96, 0xe5, 0xa6, 0x73, 0xd9, 0xf1, 0x89, 0x23, 0xf9, 0xe0, 0x8c, 0x4d, 0x5, 0xee, 0xea, 0x4a, 0xdc, 0xa2, 0x10, 0x8b, 0x3d, 0x79, 0x66, 0x73, 0xf7, 0x7, 0x6d, 0xa8, 0xb1, 0x78, 0x37, 0x4e, 0xb3, 0x32, 0x98, 0x23, 0x55, 0x25, 0xeb, 0x49, 0xd1, 0x32, 0x76, 0xa0, 0xdd, 0x56, 0, 0x93, 0x64, 0x52, 0xea, 0x6b, 0xbe, 0x74, 0x35, 0xe7, 0x48, 0x64, 0x78, 0x9a, 0x7e, 0x1f, 0x35, 0x15, 0xae, 0xa4, 0xdd, 0x44, 0xe4, 0xea, 0xb6, 0x12, 0xd3, 0xac, 0xf7
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "NI8+rrlY9Mv6dks4AhXgvkqFAgWSNM1RUL/DtDgYtfqH4ds8yznZbaIlMvyml/KDeHfPNG2SwP5urS2OvUCXGA==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x3e, 0x95, 0x77, 0x52, 0x9f, 0x6d, 0x62, 0x4d, 0xc0, 0x48, 0x4e, 0x74, 0x5, 0xd0, 0xa2, 0xaa, 0x53, 0xd5, 0x84, 0xd6, 0x65, 0xf1, 0xf4, 0xe7, 0x3b, 0x57, 0x89, 0xda, 0x66, 0xf0, 0xa5, 0x75, 0xe8, 0x49, 0x32, 0x15
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "0ce76b4f-fd4b-48ad-80ce-750cba6768d7")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x7a, 0x84, 0x67, 0
        ]
        XCTAssertTrue(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x68, 0x97, 0x7e, 0x16, 0xcc
        ]
        XCTAssertFalse(ArkanaKeys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x3a, 0xc4
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x7c, 0x93, 0x73, 0x9, 0xf6, 0x2b, 0x3a, 0x42, 0x80, 0x71, 0x59, 0x28, 0x6, 0x99, 0xef
        ]
        XCTAssertEqual(ArkanaKeys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
