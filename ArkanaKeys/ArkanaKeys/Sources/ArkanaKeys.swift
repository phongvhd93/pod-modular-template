// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import Foundation
import ArkanaKeysInterfaces

public enum ArkanaKeys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0xe, 0xf6, 0x12, 0x65, 0xa9, 0xf, 0x56, 0x2b, 0xed, 0x2e, 0x2a, 0x40, 0x67, 0xfd, 0x96, 0x92, 0x32, 0xb1, 0xa9, 0xee, 0x55, 0x92, 0x91, 0xca, 0xc, 0x62, 0xb9, 0xb9, 0x4, 0x91, 0x93, 0x42, 0xde, 0x71, 0x56, 0x22, 0x7, 0xb3, 0x60, 0x34, 0xdc, 0xd7, 0x9, 0x7f, 0x7a, 0xd7, 0x41, 0xa0, 0x5a, 0x2f, 0x4b, 0xb1, 0x2b, 0xb0, 0x7b, 0x1a, 0xed, 0xab, 0x2f, 0x6d, 0xff, 0x4b, 0x19, 0xae
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension ArkanaKeys {
    struct Global: ArkanaKeysGlobalProtocol {
        public init() {}
    }
}

public extension ArkanaKeys {
    struct Staging: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
public extension ArkanaKeys {
    struct Release: ArkanaKeysEnvironmentProtocol {
        public init() {}
    }
}
